#!/usr/bin/env python
# -*- coding: utf-8 -*-

#import telethon
import telebot
import config
import random

from telebot import types

bot = telebot.TeleBot(config.TOKEN)
#–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#(–í—ã–±–æ—Ä –ø—Ä–∏—à–µ–¥—à–∏—Ö –æ—Ñ–∏—Ü–µ—Ä–æ–≤)
who = types.InlineKeyboardMarkup(row_width=3)
button1 = types.InlineKeyboardButton("–®–ª–∞–ø–∞–∫", callback_data='NK')
button2 = types.InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data='tup')
button3 = types.InlineKeyboardButton("–®–µ–Ω—Ç", callback_data='sport')
button4 = types.InlineKeyboardButton("–í–∏—Ç—ë–∫", callback_data='fat')
button5 = types.InlineKeyboardButton("–∫–∞–∫–æ–π-—Ç–æ —Ö—É–π(–Ω–µ –æ–ø–∞—Å–Ω–æ)", callback_data='poh')
button6 = types.InlineKeyboardButton("–ö–ê–ö–û–ô-–¢–û –í–ê–ñ–ù–´–ô –•–£–ô", callback_data='pzdc')
button7 = types.InlineKeyboardButton("–ù–∏–∫—Ç–æ", callback_data='nothing')
#–î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à–∏ –∫–Ω–æ–∫–ø–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#–î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É(–í—ã–±–æ—Ä —É—à–µ–¥—à–∏—Ö –æ—Ñ–∏—Ü–µ—Ä–æ–≤)...
who.add(button1, button2, button3, button4, button5, button6, button7)
who1 = types.InlineKeyboardMarkup(row_width=3)
button11 = types.InlineKeyboardButton("–®–ª–∞–ø–∞–∫", callback_data='NK1')
button21 = types.InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data='tup1')
button31 = types.InlineKeyboardButton("–®–µ–Ω—Ç", callback_data='sport1')
button41 = types.InlineKeyboardButton("–í–∏—Ç—ë–∫", callback_data='fat1')
button51 = types.InlineKeyboardButton("–∫–∞–∫–æ–π-—Ç–æ —Ö—É–π(–Ω–µ –æ–ø–∞—Å–Ω–æ)", callback_data='poh1')
button61 = types.InlineKeyboardButton("–ö–ê–ö–û–ô-–¢–û –í–ê–ñ–ù–´–ô –•–£–ô", callback_data='pzdc1')
button71 = types.InlineKeyboardButton("–ù–∏–∫—Ç–æ", callback_data='nothing1')
#–¢–∞–∫ –∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
who1.add(button11, button21, button31, button41, button51, button61, button71)
#–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å—á—ë—Ç—á–∏–∫
Whoisthere = []
counter = int(0)
#–ï—â—ë –æ–¥–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞(–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)...
markup = types.InlineKeyboardMarkup(row_width=3)
item1 = types.InlineKeyboardButton("–í—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã!üé≤", callback_data="random")
item2 = types.InlineKeyboardButton("–í–æ–ª—å–Ω–æ!", callback_data='At_ease')
item3 = types.InlineKeyboardButton("–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å–µ", callback_data='kurs')
markup.add(item1, item2, item3)
@bot.message_handler(commands=['help', 'smirno', 'chat_id'])
def comms(message):
    try:
        if '/help' in message.text:
            sti = open('C:/Users/Wassup.B1tch/Pictures/helper.webp', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id, '/help - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n/smirno - –ø–æ–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å–º–∏—Ä–Ω–æ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ')
        elif '/smirno' in message.text:
            sti = open('C:/Users/Wassup.B1tch/Pictures/NewWelcum.tgs', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id,
                             "–¢–æ–≤–∞—Ä–∏—â {0.first_name} {0.last_name}, –≤–æ –≤—Ä–µ–º—è –º–æ–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å.\n–ß–∞—Ç —Ä–∞—Å—Å–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –¥–Ω—è.\n–î–µ–∂—É—Ä–Ω—ã–π –ø–æ —á–∞—Ç—É, –ø–æ–ª–∫–æ–≤–Ω–∏–∫ <b>{1.first_name}</b> \n –ö–∞–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è?".format(
                                 message.from_user, bot.get_me()),
                             parse_mode='html', reply_markup=markup)
        elif '/chat_id' in message.text:
            bot.send_message(message.chat.id, message.chat.id)
    except Exception as e:
        print(repr(e))
@bot.message_handler(content_types=['text'])
def at_ease(message):
    try:
        if '–≤–æ–ª—å–Ω–æ' in message.text:
            bot.send_message(message.chat.id, "–ß–ê–¢, –†–ê–°–°–û–°!!!")
        elif '–¥–µ–∂—É—Ä–Ω—ã–π' in message.text.lower():
            bot.send_message(message.chat.id,
                             "–Ø, –ø–æ–ª–∫–æ–≤–Ω–∏–∫ {1.first_name}!".format(
                                 message.from_user, bot.get_me()),
                             parse_mode='html', reply_markup=markup)
    except Exception as e:
        print(repr(e))

@bot.callback_query_handler(func=lambda call: True)
def comrep(call):
    global Whoisthere
    global counter
    try:
        if call.message:
            # –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
            if call.data == 'random':
                bot.send_message(call.message.chat.id, str(random.randint(1, 26)))
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup='')
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup=markup)
                # –í–æ–ª—å–Ω–æ
            elif call.data == 'At_ease':
                bot.send_message(call.message.chat.id, "–ß–ê–¢, –†–ê–°–°–û–°!")
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup=markup)
                # –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞
            elif call.data == 'kurs':
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
                reportkb = types.InlineKeyboardMarkup(row_width=1)
                whocame = types.InlineKeyboardButton("–ö—Ç–æ-—Ç–æ –ø—Ä–∏—à—ë–ª", callback_data="came")
                wholeave = types.InlineKeyboardButton("–ö—Ç–æ-—Ç–æ —É–±—ã–ª", callback_data="leave")
                ktoest = types.InlineKeyboardButton("–ö—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –∫—É—Ä—Å–µ???", callback_data='kto')
                reportkb.add(whocame, wholeave, ktoest)
                bot.send_message(call.message.chat.id, '–ö—Ç–æ –Ω–∞ –∫—É—Ä—Å–µ? –©–∞ –ø–æ–¥–æ–±—ä—ë–º...', reply_markup=reportkb)
            elif call.data == 'came':
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
                bot.send_message(call.message.chat.id, "–ö—Ç–æ –ø—Ä–∏—à—ë–ª?", reply_markup=who)
            # –ü—Ä–æ–ø–∏—Å—ã–≤–∞—é –ª–æ–≥–∏–∫—É –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Ü–µ—Ä–∞
            elif call.data == 'kto':
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
                if counter == 0:
                    bot.send_message(call.message.chat.id, f"–ù–∞ –∫—É—Ä—Å–µ —Å–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ")
                elif counter <= 4:
                    bot.send_message(call.message.chat.id, f"–ù–∞ –∫—É—Ä—Å–µ —Å–µ–π—á–∞—Å {counter} –æ–±—ä–µ–∫—Ç–∞:")
                    for i in range(counter):
                        bot.send_message(call.message.chat.id, f'{i+1}) {Whoisthere[i]} ;')
                elif counter >= 5:
                    bot.send_message(call.message.chat.id, f"–ù–∞ –∫—É—Ä—Å–µ —Å–µ–π—á–∞—Å {counter} –æ–±—ä–µ–∫—Ç–æ–≤:")
                    for i in range(counter):
                        bot.send_message(call.message.chat.id, f'{i + 1}) {Whoisthere[i]} ;')

            elif call.data == 'leave':
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              reply_markup='')
                bot.send_message(call.message.chat.id, "–ö—Ç–æ —É—à—ë–ª?", reply_markup=who1)
            elif call.data == 'NK1':
                if "–®–ª—è–ø–∏–∫" in Whoisthere:
                    Whoisthere.remove("–®–ª—è–ø–∏–∫")
                    counter -= 1
                else:
                    print('XYU')
                    bot.send_message(call.message.chat.id, "–¢—É—Ç —Ç–∞–∫–∏—Ö –Ω–µ –±—ã–ª–æ")
            elif call.data == 'tup1':
                if "–ö–∞–º–µ–Ω–Ω—ã–π" in Whoisthere:
                    Whoisthere.remove("–ö–∞–º–µ–Ω–Ω—ã–π")
                    counter -= 1
                else:
                    bot.send_message(call.message.chat.id, "–¢–∞–∫–∏—Ö –Ω–µ –≤–∏–¥–µ–ª")
            elif call.data == 'sport1':
                if "–®–µ–Ω—Ç—è–∫" in Whoisthere:
                    Whoisthere.remove("–®–µ–Ω—Ç—è–∫")
                    counter -= 1
                else:
                    bot.send_message(call.message.chat.id, "–ï–≥–æ –≤—Ä–æ–¥–µ –∏ –Ω–µ –±—ã–ª–æ")
            elif call.data == 'fat1':
                if "–í–∏—Ç—ë–∫" in Whoisthere:
                    Whoisthere.remove("–í–∏—Ç—ë–∫")
                    counter -= 1
                else:
                    bot.send_message(call.message.chat.id, "–û–Ω –∫—É–¥–∞-—Ç–æ —É—à—ë–ª")
            elif call.data == 'poh1':
                if "–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–∞–∂–Ω—ã–π —Ö—É–π" in Whoisthere:
                    Whoisthere.remove("–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–∞–∂–Ω—ã–π —Ö—É–π")
                    counter -= 1
                else:
                    bot.send_message(call.message.chat.id, "–¢–∞ —Ç—É—Ç –æ—Å–æ–±–æ –Ω–∏–∫—Ç–æ –∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª")
            elif call.data == 'nothing1':
                return Whoisthere
            elif call.data == 'pzdc1':
                if "–ö–∞–∫–æ–π-—Ç–æ –≤–∞–∂–Ω—ã–π —Ö—É–π" in Whoisthere:
                    Whoisthere.remove("–ö–∞–∫–æ–π-—Ç–æ –≤–∞–∂–Ω—ã–π —Ö—É–π")
                    counter -= 1
                else:
                    bot.send_message(call.message.chat.id,
                                     "–ö–æ—Ä–æ—á–µ, –±–ª—è, —á—Ç–æ-—Ç–æ —Ç–≤–æ—è —Ä–∞–∑–≤–µ–¥–∫–∞ —Ö—É—ë–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∏–∫–∞–∫–∏—Ö –≤–∞–∂–Ω—ã—Ö —Ö—É—ë–≤ —Ç—É—Ç –∏ –Ω–µ –±—ã–≤–∞–ª–æ...")
            elif call.data == 'tup':
                if '–ö–∞–º–µ–Ω–Ω—ã–π' in Whoisthere:
                    bot.send_message(call.message.chat.id, '–û–Ω –∏ —Ç–∞–∫ —Ç—É—Ç –±—ã–ª')
                else:
                    Whoisthere.append('–ö–∞–º–µ–Ω–Ω—ã–π')
                    counter += 1
            elif call.data == 'sport':
                if "–®–µ–Ω—Ç—è–∫" in Whoisthere:
                    bot.send_message(call.message.chat.id, "–û–Ω –∏ —Ç–∞–∫ —Ç—É—Ç –±—ã–ª")
                else:
                    Whoisthere.append("–®–µ–Ω—Ç—è–∫")
                    counter += 1
            elif call.data == 'fat':
                if "–í–∏—Ç—ë–∫" in Whoisthere:
                    bot.send_message(call.message.chat.id, '–û–Ω –∏ —Ç–∞–∫ —Ç—É—Ç –±—ã–ª')
                else:
                    Whoisthere.append("–í–∏—Ç—ë–∫")
                    counter += 1
            elif call.data == 'NK':
                if "–®–ª—è–ø–∏–∫" in Whoisthere:
                    bot.send_message(call.message.chat.id, '–û–Ω –∏ —Ç–∞–∫ —Ç—É—Ç –±—ã–ª')
                else:
                    Whoisthere.append("–®–ª—è–ø–∏–∫")
                    counter += 1
            elif call.data == 'poh':
                if "–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–∞–∂–Ω—ã–π —Ö—É–π" in Whoisthere:
                    bot.send_message(call.message.chat.id, '–ü–æ–∫–∞ –Ω–µ —É—Ö–æ–¥–∏–ª')
                else:
                    Whoisthere.append("–ö–∞–∫–æ–π-—Ç–æ –Ω–µ–≤–∞–∂–Ω—ã–π —Ö—É–π")
                    counter += 1
            elif call.data == "pzdc":
                if "–ö–∞–∫–æ–π-—Ç–æ –≤–∞–∂–Ω—ã–π —Ö—É–π" in Whoisthere:
                    bot.send_message(call.message.chat.id, '–û–Ω(–û–Ω–∏) –≤—Å—ë –µ—â—ë —Ç—É—Ç')
                else:
                    Whoisthere.append("–ö–∞–∫–æ–π-—Ç–æ –≤–∞–∂–Ω—ã–π —Ö—É–π")
                    counter += 1
    except Exception as e:
        print(repr(e))
bot.polling(none_stop=True)
